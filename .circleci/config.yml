# Circle CI configuration file
# https://circleci.com/docs/

---
version: 2.1

#######################################
# Define some common steps as commands.
#

commands:
  check-skip:
    steps:
      - run:
          name: Check-skip
          command: |
            export git_log=$(git log --max-count=1 --pretty=format:"%B" |
                             tr "\n" " ")
            echo "Got commit message:"
            echo "${git_log}"
            if [[ -v CIRCLE_PULL_REQUEST ]] && ( \
                [[ "$git_log" == *"[skip circle]"* ]] || \
                [[ "$git_log" == *"[circle skip]"* ]]); then
              echo "Skip detected, exiting job ${CIRCLE_JOB} for PR ${CIRCLE_PULL_REQUEST}."
              circleci-agent step halt;
            fi

  merge:
    steps:
      - run:
          name: Merge with upstream
          command: |
            if ! git remote -v | grep upstream; then
              git remote add upstream https://github.com/matplotlib/cycler.git
            fi
            git fetch upstream
            if [[ "$CIRCLE_BRANCH" != "main" ]] && \
               [[ "$CIRCLE_PR_NUMBER" != "" ]]; then
              echo "Merging ${CIRCLE_PR_NUMBER}"
              git pull --ff-only upstream "refs/pull/${CIRCLE_PR_NUMBER}/merge"
            fi

  pip-install:
    description: Upgrade pip to get as clean an install as possible
    steps:
      - run:
          name: Upgrade pip
          command: |
            python -m pip install --upgrade --user pip

  cycler-install:
    steps:
      - run:
          name: Install Cycler
          command: |
            python -m pip install --user -ve .[docs]

  doc-build:
    steps:
      - restore_cache:
          keys:
            - sphinx-env-v1-{{ .BuildNum }}-{{ .Environment.CIRCLE_JOB }}
            - sphinx-env-v1-{{ .Environment.CIRCLE_PREVIOUS_BUILD_NUM }}-{{ .Environment.CIRCLE_JOB }}
      - run:
          name: Build documentation
          command: |
            # Set epoch to date of latest tag.
            export SOURCE_DATE_EPOCH="$(git log -1 --format=%at $(git describe --abbrev=0))"
            mkdir -p logs
            make html SPHINXOPTS="-T -j4 -w /tmp/sphinxerrorswarnings.log"
            rm -r build/html/_sources
          working_directory: doc
      - save_cache:
          key: sphinx-env-v1-{{ .BuildNum }}-{{ .Environment.CIRCLE_JOB }}
          paths:
            - doc/build/doctrees

  doc-show-errors-warnings:
    steps:
      - run:
          name: Extract possible build errors and warnings
          command: |
            (grep "WARNING\|ERROR" /tmp/sphinxerrorswarnings.log ||
             echo "No errors or warnings")
            # Save logs as an artifact, and convert from absolute paths to
            # repository-relative paths.
            sed "s~$PWD/~~" /tmp/sphinxerrorswarnings.log > \
              doc/logs/sphinx-errors-warnings.log
          when: always
      - store_artifacts:
          path: doc/logs/sphinx-errors-warnings.log

##########################################
# Here is where the real jobs are defined.
#

jobs:
  docs-python39:
    docker:
      - image: cimg/python:3.9
    resource_class: large
    steps:
      - checkout
      - check-skip
      - merge

      - pip-install

      - cycler-install

      - doc-build
      - doc-show-errors-warnings

      - store_artifacts:
          path: doc/build/html

#########################################
# Defining workflows gets us parallelism.
#

workflows:
  version: 2
  build:
    jobs:
      # NOTE: If you rename this job, then you must update the `if` condition
      # and `circleci-jobs` option in `.github/workflows/circleci.yml`.
      - docs-python39
